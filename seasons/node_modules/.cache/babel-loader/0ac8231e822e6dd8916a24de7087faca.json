{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\ReactReduxProjects\\\\seasons\\\\src\\\\index.js\";\nimport { render } from '@testing-library/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  }\n\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      message: \"Please accept location request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 20\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 17\n}, this), document.querySelector('#root'));","map":{"version":3,"sources":["E:/ReactReduxProjects/seasons/src/index.js"],"names":["render","React","ReactDOM","SeasonDisplay","Spinner","App","Component","constructor","props","state","lat","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","document","querySelector"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAC7BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAY;AAACC,MAAAA,GAAG,EAAC,IAAL;AAAWC,MAAAA,YAAY,EAAC;AAAxB,KAAZ;AAEH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAG,KAAKC,QAAL,CAAc;AAACR,MAAAA,GAAG,EAACO,QAAQ,CAACE,MAAT,CAAgBC;AAArB,KAAd,CADf,EAEIC,GAAG,IAAG,KAAKH,QAAL,CAAc;AAACP,MAAAA,YAAY,EAACU,GAAG,CAACC;AAAlB,KAAd,CAFV;AAKH;;AAEDtB,EAAAA,MAAM,GAAE;AAEJ,QAAI,KAAKS,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA3C,EAA+C;AAC/C,0BAAO;AAAA,8BAAa,KAAKD,KAAL,CAAWE,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACC;;AACD,QAAI,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA3C,EAA+C;AAC/C,0BAAO,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAP;AACC;;AACG,wBAAO,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,YAAP;AAEP;;AA1B4B;;AA4BjCR,QAAQ,CAACF,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAuBuB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAvB","sourcesContent":["import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);                                   \r\n\r\n        this.state= {lat:null, errorMessage:''};\r\n        \r\n    } \r\n    \r\n    componentDidMount (){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position =>this.setState({lat:position.coords.latitude}),\r\n            err =>this.setState({errorMessage:err.message})\r\n             \r\n        );\r\n    }\r\n             \r\n    render(){   \r\n\r\n        if (this.state.errorMessage && !this.state.lat){\r\n        return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n        if (!this.state.errorMessage && this.state.lat){\r\n        return <SeasonDisplay lat={this.state.lat}/>\r\n        }\r\n            return <Spinner message='Please accept location request'/>;  \r\n        \r\n    }\r\n}   \r\nReactDOM.render(<App/>,document.querySelector('#root'));\r\n"]},"metadata":{},"sourceType":"module"}